#!/usr/bin/env groovy
/**
   From the Shmenkins project -> https://github.com/qorrect/shmenkins
 **/

GroovyShell shell = new GroovyShell()
def Jenkinsfile = shell.parse(new File("Jenkinsfile"))

// SECTION TO CUSTOMIZE
// Set required variables here
Jenkinsfile.MAVEN_SETTINGS = "~/.m2/settings.xml"
Jenkinsfile.env = [ BRANCH_NAME : "test"]
Jenkinsfile.params = [ DEPLOY_TARGET : "Do not deploy" ]
// End SECTION TO CUSTOMIZE

// TODO:  Set properties on object from commandline

// def setR(keys,v) {
//   if (keys.length == 2 ) return new Expando(keys[0],keys[1])
//   else {
//     def k = keys.pop()
//     def v = keys.pop()
    
//   }
// }


// args.each { a -> 
//   def splits = a.split("=")
//   def k = splits[0], v=splits[1]
//   def keys = new ArrayDeque(k.split("\\."))
//   Jenkinsfile.setProperty(setR(keys),v)
//   //Jenkinsfile.setProperty(k,v)
// }



@Grab(group='org.apache.maven', module='maven-model', version='3.0.2')

import groovy.json.JsonSlurper;
import org.apache.maven.model.io.xpp3.MavenXpp3Reader

public class Shmenkins {

  static def CURRENT_DIRECTORY = "./"
  
  static def configFile (Map o){}
  static def configFileProvider (List l,Closure body){
    body()
  }  
  static def fileLoader = new fileLoader()
  static def scm = ""
  static def currentBuild = [ number : 1 , rawBuild: null ]
  static def params = [ DEPLOY_TARGET : "Do not deploy" ]
  static def containerTemplate(Map options ) {}
  static def hostPathVolume(Map options ) {} 
  static def disableConcurrentBuilds() {}
  static def choice (Map o){}
  static def step (Map o){}
  static def parameters (List l){}
  static def booleanParam(Map m){}
  static def writeFile(Map m){
    new File(m["file"]).write(m["text"])
  }
  static def archiveArtifacts(Map m){}
  static def string(Map m){}
  static def git (Map o){}
  static def checkout(String s) {}
  static def junit(String s) {}
  static def readFile(String s) {
    return new File(s).text
  }
  static def readMavenPom(Map m) {
    return new MavenXpp3Reader().read(new FileInputStream(new File(this.CURRENT_DIRECTORY,m["file"])))
  }
  static def cron (String s){}
  static def pipelineTriggers (List l){}
  static def properties (List l){}
  static def node (String n = "",Closure body)  {body()}
  static def agent(String n = "",Closure body)  {body()}
  static def stages(String n = "",Closure body)  {body()}
  static def post(String n = "",Closure body)  {body()}
  static def podTemplate(Map options, Closure body) {body() }
  static def container(String s, Closure body){println("Container ${s}");body() }
  static def stage(String s, Closure body){println("Stage ${s}");    body() }
  static def stage(String s){println("Stage ${s}")}
  static def withCredentials(List l, Closure body) {println("WithCredentials ${l}");    body() }
  static def echo (String s) {println(s);}
  static def sh(Map m) { return sh(m['script'] ) }
  static def dir(String d,Closure f) {
    this.CURRENT_DIRECTORY=d
    f()
    this.CURRENT_DIRECTORY="./"
  }
  static def sh(String s) {
      print("Executing cd ${this.CURRENT_DIRECTORY} && ${s}\n(Waiting)\n")
      def p = ['/bin/bash','-c',"cd ${this.CURRENT_DIRECTORY} && ${s}"].execute()
      p.waitFor()
      def ret = p.text
      println ret
      return ret
  }
}

class fileLoader {
  static def fromGit(String libPath, String repository, String branch="", String credentailsId="", String labelExpression="") {
    GroovyShell shell = new GroovyShell()
    def script = shell.evaluate(new File(libPath))

    script.sh = { def s ->
      if ((s instanceof Map)) {
	s = s["script"]
      }
      print("Executing ${s}\n")
      def p = ['/bin/bash','-c',s].execute()
      p.waitFor()
      def ret = p.text
      println ret
      return ret 
    }

    // def script = shell.parse(new File(libPath))
    return script
    
  }
}

Jenkinsfile.metaClass.mixin Shmenkins
Jenkinsfile.run()
